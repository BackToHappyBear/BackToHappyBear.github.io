<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xuan&#39;s Blog</title>
  <subtitle>keep studing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://BackToHappyBear.github.io/"/>
  <updated>2017-04-13T16:37:57.409Z</updated>
  <id>http://BackToHappyBear.github.io/</id>
  
  <author>
    <name>xuan</name>
    <email>geek.xing@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初窥angular的双向数据绑定</title>
    <link href="http://BackToHappyBear.github.io/2017/04/13/angular%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://BackToHappyBear.github.io/2017/04/13/angular双向数据绑定的原理/</id>
    <published>2017-04-13T15:23:46.364Z</published>
    <updated>2017-04-13T16:37:57.409Z</updated>
    
    <content type="html"><![CDATA[<p>简单直接，自问自答。</p>
<h3 id="如何实现双向数据绑定？"><a href="#如何实现双向数据绑定？" class="headerlink" title="如何实现双向数据绑定？"></a>如何实现双向数据绑定？</h3><ul>
<li><p>在这之前先了解一下 <code>$watch</code>：</p>
<ul>
<li><code>$scope.$watch( watchExp, listener, objectEquality)</code></li>
<li>三个属性分别代表：监视的目标，变化时执行的函数（2个参数代表：变化后的值与之前的值），监视的是一个变量还是一个对象。</li>
</ul>
</li>
<li><p>举例说明：</p>
<ul>
<li>在视图中用表达式绑定了 <code></code>,那么 <code>angular</code> 就会把这个变量添加到<code>watch list</code>队列中，然后通过 <code>$digest</code> 或 <code>$apply</code> 去调用这个队列中的值比较前后是否发生了变化，也就是所说的 <code>dirty-checking</code>，然后渲染到视图中。</li>
</ul>
</li>
</ul>
<h3 id="什么时候触发脏检查？"><a href="#什么时候触发脏检查？" class="headerlink" title="什么时候触发脏检查？"></a>什么时候触发脏检查？</h3><ul>
<li>DOM事件</li>
<li>XHR事件</li>
<li>Location变化</li>
<li>Timer事件</li>
<li>执行 <code>$gigest()</code> 或 <code>$apply()</code><ul>
<li>前者是从该 <code>scope</code> 和 其子 <code>scope</code>开始轮询，后者是从顶层的 <code>$rootScope</code> 开始轮询。</li>
</ul>
</li>
</ul>
<h3 id="脏检查执行几次？"><a href="#脏检查执行几次？" class="headerlink" title="脏检查执行几次？"></a>脏检查执行几次？</h3><p>至少两次，第二次执行的目的是检测第一次执行后，其数据有没有影响别的属性值，如果有那么就会再次执行一次，如果连续触发了10次，那么 <code>angular</code> 会认为你的逻辑错误而报错。所以如果监视队列有很多值，轮询检查会消耗大量性能，这也是 <code>angular</code> 性能乏力的根本原因。</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>这里只是简略的了解 <code>angular</code> 的双向数据绑定，其内部具体的实现就不研究了，当然针对其优化的方法也有很多，但并不能阻止其被后继者超越。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单直接，自问自答。&lt;/p&gt;
&lt;h3 id=&quot;如何实现双向数据绑定？&quot;&gt;&lt;a href=&quot;#如何实现双向数据绑定？&quot; class=&quot;headerlink&quot; title=&quot;如何实现双向数据绑定？&quot;&gt;&lt;/a&gt;如何实现双向数据绑定？&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在这之前先了解
    
    </summary>
    
      <category term="JavaScript" scheme="http://BackToHappyBear.github.io/categories/JavaScript/"/>
    
    
      <category term="双向数据绑定 angular" scheme="http://BackToHappyBear.github.io/tags/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-angular/"/>
    
  </entry>
  
  <entry>
    <title>初窥双向数据绑定--Object.defineProperty()</title>
    <link href="http://BackToHappyBear.github.io/2017/04/06/%E5%88%9D%E7%AA%A5%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A--Object.defineProperty()/"/>
    <id>http://BackToHappyBear.github.io/2017/04/06/初窥双向数据绑定--Object.defineProperty()/</id>
    <published>2017-04-06T12:29:29.196Z</published>
    <updated>2017-04-11T07:44:30.553Z</updated>
    
    <content type="html"><![CDATA[<p>之前在面向对象的学习中模糊的听过这个属性，但没有深究，但是 <code>vue</code> 实现双向数据绑定用到了这个属性，那还是有必要研究一下。</p>
<h3 id="双向数据绑定的实现方式"><a href="#双向数据绑定的实现方式" class="headerlink" title="双向数据绑定的实现方式"></a>双向数据绑定的实现方式</h3><p>我理解的双向数据绑定就是把 <code>view</code> 层与   <code>model</code> 层的数据关联起来，任何一方发生变化会影响另一方相应的变化。</p>
<ul>
<li>实现方式有三种：<ul>
<li>脏检查</li>
<li>观察机制</li>
<li>封装属性访问器</li>
</ul>
</li>
</ul>
<h3 id="属性访问器"><a href="#属性访问器" class="headerlink" title="属性访问器"></a>属性访问器</h3><h4 id="参数解析"><a href="#参数解析" class="headerlink" title="参数解析"></a>参数解析</h4><p>直接上代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mathObj = &#123;</div><div class="line">    <span class="attr">constants</span>: &#123;</div><div class="line">        <span class="string">"pi"</span>: <span class="number">3.14</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">areaOfCircle</span>: <span class="function"><span class="keyword">function</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.constants.pi*radius*radius;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面是一个用于求圆面积的对象，如果此时其中的 <code>pi</code> 值改变了，作用也就消失了，所以要保证其值无法被修改。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mathObj = &#123;</div><div class="line">    <span class="attr">constants</span>: &#123;&#125;,</div><div class="line">    <span class="attr">areaOfCircle</span>: <span class="function"><span class="keyword">function</span>(<span class="params">radius</span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.constants.pi*radius*radius;</div><div class="line">    &#125;</div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="built_in">Object</span>.defineProperty(mathObj.constants, <span class="string">"pi"</span>, &#123;</div><div class="line">    <span class="attr">value</span>: <span class="number">3.14</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">false</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">mathObj.constants.pi = <span class="number">3</span>;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(mathObj.constants.pi);  <span class="comment">// 3.14</span></div></pre></td></tr></table></figure></p>
<p>代码很明了，看看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">MDN</a> 上的文档，<code>Object.defineProperty(obj, prop, descriptor)</code>，它有三个参数：</p>
<ul>
<li>obj：要在其上定义属性的对象</li>
<li>prop：要定义或修改的属性的名称</li>
<li><p>descriptor: 定义或修改属性的描述符，这个对象又有很多属性</p>
<ul>
<li>configurable：<br>默认为 <code>false</code>。 当且仅当该属性描述符的类型可以被改变并且该属性可以从对应对象中删除时。</li>
<li>enumerable：<br>默认为 <code>false</code>。 当且仅当该属性在枚举相应对象上的属性时显示。</li>
<li>value：<br>默认为 <code>undefined</code>。与该属性相关联的值。可以是任何有效的JavaScript值（数字，对象，函数等）。</li>
<li>writable：<br>默认为 <code>false</code>。 当且仅当与属性相关联的值可以使用赋值运算符进行更改。<br>访问器描述符还具有以下可选键：</li>
<li>get：<br>默认为undefined。一个功能，作为一个吸气剂的财产，或undefined如果没有吸气剂。函数返回值将被用作属性的值。</li>
<li>set：<br>默认为undefined。作为财产的设定者的功能，或者undefined没有设定者。该函数将仅接收参数赋值给该属性的新值。</li>
</ul>
</li>
<li><p>返回值：传递给函数的对象</p>
</li>
</ul>
<p>谷歌翻译的有些还是不太靠谱啊，还好属性名都是比较语义化的，但理解起来还需要查一下其他的资料了。</p>
<p>这是他们的默认值，从上到下捋一遍：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">enumerable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">writable</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">value</span>: <span class="literal">null</span>,</div><div class="line">    <span class="attr">set</span>: <span class="literal">undefined</span>,</div><div class="line">    <span class="attr">get</span>: <span class="literal">undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>1、<code>configurable</code>，是否可以配置。包括是否可以删除属性、修改 <code>writable</code>、<code>enumerable</code>、<code>configurable</code>的属性值。<br>2、 <code>enumerable</code>，是否可枚举，即是否能通过 <code>for...in</code> 遍历到<br>3、 <code>writable</code>,是否能被重写<br>4、<code>value</code>,属性的默认值<br>5、<code>set</code>, 这俩被翻译得跑偏的很，可以理解为重写器，一旦属性被重新复制，此方法被自动调用（重点）<br>6、 <code>get</code>，同上，读取器(重点)</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li>兼容性：IE8及其以下不兼容</li>
<li>不能对同一个属性出现两种存取访问控制：即如果用了 <code>value</code> 设置了默认值，就不能用 <code>set</code> 和 <code>get</code> 设置和获取值。(如果此处改成 <code>writable</code> 也会报错)</li>
<li>Hack：如果传入的第二个参数属性是一个数组，并设置了其不可写，数组名是不会变的，但其里面的值是可以通过 <code>push</code> 进去的。</li>
</ul>
<h4 id="get、set"><a href="#get、set" class="headerlink" title="get、set"></a>get、set</h4><p>回头再来看看 <code>get</code> 和 <code>set</code>,<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;,</div><div class="line">    value;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">'number'</span>,&#123;</div><div class="line">  <span class="attr">set</span>:<span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'赋给我的值为'</span>+newValue);</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">get</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'不给取！'</span>)</div><div class="line">    <span class="keyword">return</span> <span class="string">'nothing'</span>;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">enumerable</span> : <span class="literal">true</span>,</div><div class="line">  <span class="attr">configurable</span> : <span class="literal">true</span></div><div class="line">&#125;)</div><div class="line">obj.number = <span class="number">1</span>; <span class="comment">// '赋给我的值为'1</span></div><div class="line"><span class="built_in">console</span>.log(obj.number); </div><div class="line"><span class="comment">// '不给取'</span></div><div class="line"><span class="comment">// 'nothing'</span></div></pre></td></tr></table></figure></p>
<p>这里说明了，对于这个对象赋值或取值的过程，都会相应的触发相应 <code>set</code> 和 <code>get</code> 的函数,思维是不是被打开了，再看看下面这个：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> bValue;</div><div class="line"><span class="keyword">var</span> o = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(o, <span class="string">"b"</span>, &#123;</div><div class="line">  <span class="attr">get</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> bValue;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">set</span> : <span class="function"><span class="keyword">function</span>(<span class="params">newValue</span>)</span>&#123;</div><div class="line">    bValue = newValue;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">enumerable</span> : <span class="literal">true</span>,</div><div class="line">  <span class="attr">configurable</span> : <span class="literal">true</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line">o.b = <span class="number">38</span>;  </div><div class="line"></div><div class="line"><span class="comment">// The value of o.b is now always identical to bValue, unless o.b is redefined</span></div></pre></td></tr></table></figure></p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty" target="_blank" rel="external">MDN</a> 上的原例子，它还表示了 <code>o.b</code> 与 <code>bValue</code> 一致了，除非 <code>o.b</code>改变了。那么再测试一下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">bValue = <span class="number">39</span>;  <span class="comment">// 39</span></div><div class="line">o.b   <span class="comment">// 39</span></div><div class="line"></div><div class="line">o.b = <span class="number">40</span>;</div><div class="line">bValue;  <span class="comment">// 40</span></div></pre></td></tr></table></figure>
<p>哦~~~  此时的 <code>bValue</code> 已经与 <code>o.b</code> 绑定起来了,虽然没有看 <code>Vue</code> 的源码实现，但是通过这几个例子已经有点眉目了，初窥门径的目的已经达成。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在面向对象的学习中模糊的听过这个属性，但没有深究，但是 &lt;code&gt;vue&lt;/code&gt; 实现双向数据绑定用到了这个属性，那还是有必要研究一下。&lt;/p&gt;
&lt;h3 id=&quot;双向数据绑定的实现方式&quot;&gt;&lt;a href=&quot;#双向数据绑定的实现方式&quot; class=&quot;headerl
    
    </summary>
    
      <category term="JavaScript" scheme="http://BackToHappyBear.github.io/categories/JavaScript/"/>
    
    
      <category term="双向数据绑定 vue" scheme="http://BackToHappyBear.github.io/tags/%E5%8F%8C%E5%90%91%E6%95%B0%E6%8D%AE%E7%BB%91%E5%AE%9A-vue/"/>
    
  </entry>
  
</feed>
